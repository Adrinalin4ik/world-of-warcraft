{"version":3,"file":"mcal.js","names":["_chunk","_interopRequireDefault","require","obj","__esModule","_typeof","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","_defineProperty","value","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","MCAL","chunk","Chunk","decode","stream","parent","_this","data","layers","MCLY","slice","alphaMaps","map","layer","compressed","decodeCompressed","decodeUncompressed","size","ALPHA_MAP_SIZE","buffer","alpha","Buffer","writePos","fill","pos","count","wdtFlags","readBuffer","halfSize","ALPHA_MAP_HALF_SIZE","side","Math","sqrt","offset","flags","_default","exports"],"sources":["../../src/lib/adt/mcal.js"],"sourcesContent":["import Chunk from '../chunked/chunk';\n\nclass MCAL {\n\n  static ALPHA_MAP_SIZE = 4096;\n  static ALPHA_MAP_HALF_SIZE = 2048;\n\n  constructor() {\n    this.chunk = Chunk();\n  }\n\n  decode(stream, parent) {\n    const data = this.chunk.decode(stream, parent);\n\n    // Skip the fully opaque initial layer\n    const layers = parent.MCLY.layers.slice(1);\n    data.alphaMaps = layers.map((layer) => {\n      if (layer.compressed) {\n        return this.decodeCompressed(stream);\n      }\n      return this.decodeUncompressed(stream, parent);\n    });\n\n    return data;\n  }\n\n  decodeCompressed(stream) {\n    const size = this.constructor.ALPHA_MAP_SIZE;\n    const buffer = stream.buffer;\n    const alpha = new Buffer(size);\n\n    let writePos = 0;\n    while (writePos < size) {\n      const fill = buffer[stream.pos] & 0x80;\n      const count = buffer[stream.pos] & 0x7F;\n      stream.pos++;\n      for (let i = 0; i < count; ++i) {\n        if (writePos === size) {\n          break;\n        }\n        alpha[writePos] = buffer[stream.pos];\n        writePos++;\n        if (!fill) {\n          stream.pos++;\n        }\n      }\n      if (fill) {\n        stream.pos++;\n      }\n    }\n\n    return alpha;\n  }\n\n  decodeUncompressed(stream, parent) {\n    const size = this.constructor.ALPHA_MAP_SIZE;\n    const wdtFlags = parent.parent.wdtFlags;\n    if (wdtFlags & 0x4 || wdtFlags & 0x80) {\n      return stream.readBuffer(size);\n    }\n\n    const halfSize = this.constructor.ALPHA_MAP_HALF_SIZE;\n    const buffer = stream.readBuffer(halfSize);\n    const alpha = new Buffer(size);\n    const side = Math.sqrt(size);\n\n    for (let i = 0; i < halfSize; ++i) {\n      const value = buffer[i];\n      const offset = i * 2;\n      alpha[offset] = (value & 0x0F) * 17;\n      alpha[offset + 1] = (value >> 4) * 17;\n\n      // Correct broken alpha maps unless flagged as correct by chunk\n      // See: http://www.pxr.dk/wowdev/wiki/index.php?title=ADT/v18#Uncompressed_.282048.29\n      if (!(parent.flags & 0x200)) {\n        if (offset > size - side) {\n          alpha[offset] = alpha[offset - side];\n          alpha[offset + 1] = alpha[offset + 1 - side];\n        }\n        if (offset % side === (side - 2)) {\n          alpha[offset + 1] = alpha[offset];\n        }\n      }\n    }\n\n    return alpha;\n  }\n\n}\n\nexport default new MCAL();\n"],"mappings":"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"}